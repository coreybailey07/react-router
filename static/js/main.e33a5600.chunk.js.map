{"version":3,"sources":["example/preventing-transitions.jsx","example/animated-transitions.jsx","example/staticrouter-context.jsx","App.js","reportWebVitals.js","index.js"],"names":["PreventingTransitionsExample","to","path","exact","children","BlockingForm","useState","isBlocking","setIsBlocking","onSubmit","event","preventDefault","target","reset","when","message","location","pathname","size","placeholder","onChange","value","length","styles","position","left","right","top","bottom","content","fill","textAlign","nav","padding","margin","height","width","display","navItem","flex","listStyleType","hsl","color","paddingTop","fontSize","rgb","RouteStatus","props","render","staticContext","statusCode","PrintContext","JSON","stringify","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"4RAee,SAASA,IACtB,OACE,eAAC,IAAD,WACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,OAAT,mBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,OAAT,sBAIJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,SAAU,cAACC,EAAD,MAChC,cAAC,IAAD,CAAOH,KAAK,OAAOE,SAAU,uCAC7B,cAAC,IAAD,CAAOF,KAAK,OAAOE,SAAU,6CAMrC,SAASC,IAAgB,IAAD,EACYC,oBAAS,GADrB,mBACjBC,EADiB,KACLC,EADK,KAGtB,OACE,uBACEC,SAAU,SAAAC,GACRA,EAAMC,iBACND,EAAME,OAAOC,QACbL,GAAc,IAJlB,UAOE,cAAC,IAAD,CACEM,KAAMP,EACNQ,QAAS,SAAAC,GAAQ,+CACmBA,EAASC,aAI/C,0CACY,IACTV,EAAa,uCAAyC,UAGzD,4BACE,uBACEW,KAAK,KACLC,YAAY,sCACZC,SAAU,SAAAV,GACRF,EAAcE,EAAME,OAAOS,MAAMC,OAAS,QAKhD,4BACE,kE,kBCmCR,IAAMC,EAAS,CAEfA,KAAc,CACZC,SAAU,WACVC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,OAAQ,IAGVL,EAAOM,QAAP,2BACKN,EAAOO,MADZ,IAEEH,IAAK,OACLI,UAAW,WAGbR,EAAOS,IAAM,CACXC,QAAS,EACTC,OAAQ,EACRV,SAAU,WACVG,IAAK,EACLQ,OAAQ,OACRC,MAAO,OACPC,QAAS,QAGXd,EAAOe,QAAU,CACfP,UAAW,SACXQ,KAAM,EACNC,cAAe,OACfP,QAAS,QAGXV,EAAOkB,IAAP,2BACKlB,EAAOO,MADZ,IAEEY,MAAO,QACPC,WAAY,OACZC,SAAU,SAGZrB,EAAOsB,IAAP,2BACKtB,EAAOO,MADZ,IAEEY,MAAO,QACPC,WAAY,OACZC,SAAU,S,oCC9HZ,SAASE,EAAYC,GACnB,OACE,cAAC,IAAD,CACEC,OAAQ,YAAwB,IAArBC,EAAoB,EAApBA,cAOT,OAJIA,IACFA,EAAcC,WAAaH,EAAMG,YAG5B,8BAAMH,EAAM3C,cAM3B,SAAS+C,EAAaJ,GACpB,OAAO,iDAAoBK,KAAKC,UAAUN,EAAME,kBAGDK,YCnClCC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e33a5600.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Prompt\n} from \"react-router-dom\";\n\n// Sometimes you want to prevent the user from\n// navigating away from a page. The most common\n// use case is when they have entered some data\n// into a form but haven't submitted it yet, and\n// you don't want them to lose it.\n\nexport default function PreventingTransitionsExample() {\n  return (\n    <Router>\n      <ul>\n        <li>\n          <Link to=\"/\">Form</Link>\n        </li>\n        <li>\n          <Link to=\"/one\">One</Link>\n        </li>\n        <li>\n          <Link to=\"/two\">Two</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route path=\"/\" exact children={<BlockingForm />} />\n        <Route path=\"/one\" children={<h3>One</h3>} />\n        <Route path=\"/two\" children={<h3>Two</h3>} />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction BlockingForm() {\n  let [isBlocking, setIsBlocking] = useState(false);\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault();\n        event.target.reset();\n        setIsBlocking(false);\n      }}\n    >\n      <Prompt\n        when={isBlocking}\n        message={location =>\n          `Are you sure you want to go to ${location.pathname}`\n        }\n      />\n\n      <p>\n        Blocking?{\" \"}\n        {isBlocking ? \"Yes, click a link or the back button\" : \"Nope\"}\n      </p>\n\n      <p>\n        <input\n          size=\"50\"\n          placeholder=\"type something to block transitions\"\n          onChange={event => {\n            setIsBlocking(event.target.value.length > 0);\n          }}\n        />\n      </p>\n\n      <p>\n        <button>Submit to stop blocking</button>\n      </p>\n    </form>\n  );\n}\n","import \"./animated-transitions.scss\";\n\nimport React from \"react\";\nimport {\n  TransitionGroup,\n  CSSTransition\n} from \"react-transition-group\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useLocation,\n  useParams\n} from \"react-router-dom\";\n\nexport default function AnimationExample() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/hsl/10/90/50\" />\n        </Route>\n        <Route path=\"*\">\n          <AnimationApp />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nfunction AnimationApp() {\n  let location = useLocation();\n\n  return (\n    <div style={styles.fill}>\n      <ul style={styles.nav}>\n        <NavLink to=\"/hsl/10/90/50\">Red</NavLink>\n        <NavLink to=\"/hsl/120/100/40\">Green</NavLink>\n        <NavLink to=\"/rgb/33/150/243\">Blue</NavLink>\n        <NavLink to=\"/rgb/240/98/146\">Pink</NavLink>\n      </ul>\n\n      <div style={styles.content}>\n        <TransitionGroup>\n          {/*\n            This is no different than other usage of\n            <CSSTransition>, just make sure to pass\n            `location` to `Switch` so it can match\n            the old location as it animates out.\n          */}\n          <CSSTransition\n            key={location.key}\n            classNames=\"fade\"\n            timeout={300}\n          >\n            <Switch location={location}>\n              <Route path=\"/hsl/:h/:s/:l\" children={<HSL />} />\n              <Route path=\"/rgb/:r/:g/:b\" children={<RGB />} />\n            </Switch>\n          </CSSTransition>\n        </TransitionGroup>\n      </div>\n    </div>\n  );\n}\n\nfunction NavLink(props) {\n  return (\n    <li style={styles.navItem}>\n      <Link {...props} style={{ color: \"inherit\" }} />\n    </li>\n  );\n}\n\nfunction HSL() {\n  let { h, s, l } = useParams();\n\n  return (\n    <div\n      style={{\n        ...styles.fill,\n        ...styles.hsl,\n        background: `hsl(${h}, ${s}%, ${l}%)`\n      }}\n    >\n      hsl({h}, {s}%, {l}%)\n    </div>\n  );\n}\n\nfunction RGB() {\n  let { r, g, b } = useParams();\n\n  return (\n    <div\n      style={{\n        ...styles.fill,\n        ...styles.rgb,\n        background: `rgb(${r}, ${g}, ${b})`\n      }}\n    >\n      rgb({r}, {g}, {b})\n    </div>\n  );\n}\n\nconst styles = {};\n\nstyles.fill = {\n  position: \"absolute\",\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0\n};\n\nstyles.content = {\n  ...styles.fill,\n  top: \"40px\",\n  textAlign: \"center\"\n};\n\nstyles.nav = {\n  padding: 0,\n  margin: 0,\n  position: \"absolute\",\n  top: 0,\n  height: \"40px\",\n  width: \"100%\",\n  display: \"flex\"\n};\n\nstyles.navItem = {\n  textAlign: \"center\",\n  flex: 1,\n  listStyleType: \"none\",\n  padding: \"10px\"\n};\n\nstyles.hsl = {\n  ...styles.fill,\n  color: \"white\",\n  paddingTop: \"20px\",\n  fontSize: \"30px\"\n};\n\nstyles.rgb = {\n  ...styles.fill,\n  color: \"white\",\n  paddingTop: \"20px\",\n  fontSize: \"30px\"\n};\n","import React, { Component } from \"react\";\nimport { StaticRouter as Router, Route } from \"react-router-dom\";\n\n// This example renders a route within a StaticRouter and populates its\n// staticContext, which it then prints out. In the real world you would\n// use the StaticRouter for server-side rendering:\n//\n// import express from \"express\";\n// import ReactDOMServer from \"react-dom/server\";\n//\n// const app = express()\n//\n// app.get('*', (req, res) => {\n//   let staticContext = {}\n//\n//   let html = ReactDOMServer.renderToString(\n//     <StaticRouter location={req.url} context={staticContext}>\n//       <App /> (includes the RouteStatus component below e.g. for 404 errors)\n//     </StaticRouter>\n//   );\n//\n//   res.status(staticContext.statusCode || 200).send(html);\n// });\n//\n// app.listen(process.env.PORT || 3000);\n\nfunction RouteStatus(props) {\n  return (\n    <Route\n      render={({ staticContext }) => {\n        // we have to check if staticContext exists\n        // because it will be undefined if rendered through a BrowserRouter\n        if (staticContext) {\n          staticContext.statusCode = props.statusCode;\n        }\n\n        return <div>{props.children}</div>;\n      }}\n    />\n  );\n}\n\nfunction PrintContext(props) {\n  return <p>Static context: {JSON.stringify(props.staticContext)}</p>;\n}\n\nexport default class StaticRouterExample extends Component {\n  // This is the context object that we pass to the StaticRouter.\n  // It can be modified by routes to provide additional information\n  // for the server-side render\n  staticContext = {};\n\n  render() {\n    return (\n      <Router location=\"/foo\" context={this.staticContext}>\n        <div>\n          <RouteStatus statusCode={404}>\n            <p>Route with statusCode 404</p>\n            <PrintContext staticContext={this.staticContext} />\n          </RouteStatus>\n        </div>\n      </Router>\n    );\n  }\n}\n","import './App.css';\nimport * as Cmpt from './example';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cmpt.PreventingTransitions/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}